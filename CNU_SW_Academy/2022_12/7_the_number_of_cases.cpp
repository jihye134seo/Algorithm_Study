// 거꾸로 뒤집어도 같은 수를 찾는 문제
// 각 자리 수의 숫자는 1, 6, 8, 9, 0만 위치할 수 있음
// 주어진 자리수가 짝수일 경우와 홀수일 경우가 다름
/* 
  짝수일 경우 : 주어진 자리수의 반만큼의 자리만 자유롭게 선택할 수 있음
  아래의 예에서는 첫번째 자리 수, 두번째 자리 수만 선택 가능하고 세번째 자리 수, 네번재 자리 수는 첫번째, 두번째 자리 수에 의해 결정되므로 선택 불가하다.
  (첫번째 자리수가 1일 경우 마지막 자리수는 1이어야 대칭이 성립함)
  예) 주어진 자리수가 4일 경우 : | 경우의 수 : 4 (1, 6, 8, 9) | 경우의 수 : 5 (1, 6, 8, 9, 0) | 경우의 수 : 1 (선택불가) | 경우의 수 : 1 (선택불가) |
*/

/* 
  홀수일 경우 : 주어진 자리수의 반+1 만큼의 자리만 자유롭게 선택할 수 있음
  아래의 예에서는 첫번째 자리 수, 두번째 자리 수, 세번째 자리 수만 선택 가능하고 네번째 자리 수, 다섯번째 자리 수는 첫번째, 두번째 자리 수에 의해 결정되므로 선택 불가하다.
  세번째 자리 수는 1 또는 8을 자유롭게 선택 가능하다.
  예) 주어진 자리수가 3일 경우 : | 경우의 수 : 4 (1, 6, 8, 9) | 경우의 수 : 5 (1, 6, 8, 9, 0) | 경우의 수 : 3 (1, 8, 0) | 경우의 수 : 1 (선택불가) | 경우의 수 : 1 (선택불가) |
*/

#include <iostream>
#include <cmath>

using namespace std;

int main(void) {
    int n;
    
    cin >> n;
    
    if(n % 2 == 0){ // 짝수일 경우
        cout << pow(5, (n/2)-1) * 4 << endl;  //첫
    }
    else{           // 홀수일 경우
        cout << pow(5, ((n-1)/2)-1) * 12 << endl;
    }
    
    return 0;
}
